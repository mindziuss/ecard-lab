<?xml version="1.0"?>
<doc>
    <assembly>
        <name>mscorlib</name>
    </assembly>
    <members>
        <member name="T:System.Activator">
            <summary></summary>
        </member>
        <member name="T:System.Object">
            <summary></summary>
        </member>
        <member name="M:System.Object.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Object.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Object.Equals(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Object.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Object.GetType">
            <summary></summary>
        </member>
        <member name="M:System.Object.MemberwiseClone">
            <summary></summary>
        </member>
        <member name="M:System.Object.ReferenceEquals(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Object.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Activator.GetObject(System.Type,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Activator.GetObject(System.Type,System.String,System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.AppDomain">
            <summary></summary>
        </member>
        <member name="M:System.AppDomain.Lock">
            <summary></summary>
        </member>
        <member name="M:System.AppDomain.Unload(System.AppDomain)">
            <summary></summary>
        </member>
        <member name="E:System.AppDomain.DomainUnload">
            <summary></summary>
        </member>
        <member name="P:System.AppDomain.CurrentDomain">
            <summary></summary>
        </member>
        <member name="T:System.ApplicationException">
            <summary></summary>
        </member>
        <member name="T:System.Exception">
            <summary></summary>
        </member>
        <member name="F:System.Exception.ISO7816StatusWord">
            <summary></summary>
        </member>
        <member name="M:System.Exception.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Exception.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Exception.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:System.Exception.GetBaseException">
            <summary></summary>
        </member>
        <member name="M:System.Exception.ToString">
            <summary></summary>
        </member>
        <member name="P:System.Exception.Message">
            <summary></summary>
        </member>
        <member name="P:System.Exception.InnerException">
            <summary></summary>
        </member>
        <member name="M:System.ApplicationException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.ApplicationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.ApplicationException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.ArgumentException">
            <summary></summary>
        </member>
        <member name="T:System.SystemException">
            <summary></summary>
        </member>
        <member name="M:System.SystemException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.SystemException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.SystemException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentException.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="P:System.ArgumentException.ParamName">
            <summary></summary>
        </member>
        <member name="T:System.ArgumentNullException">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentNullException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentNullException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentNullException.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="T:System.ArgumentOutOfRangeException">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentOutOfRangeException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="P:System.ArgumentOutOfRangeException.ActualValue">
            <summary></summary>
        </member>
        <member name="T:System.ArithmeticException">
            <summary></summary>
        </member>
        <member name="M:System.ArithmeticException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.ArithmeticException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.ArithmeticException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Array">
            <summary></summary>
        </member>
        <member name="T:System.ICloneable">
            <summary></summary>
        </member>
        <member name="M:System.ICloneable.Clone">
            <summary></summary>
        </member>
        <member name="T:System.Collections.IList">
            <summary></summary>
        </member>
        <member name="T:System.Collections.ICollection">
            <summary></summary>
        </member>
        <member name="T:System.Collections.IEnumerable">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IEnumerable.GetEnumerator">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ICollection.SyncRoot">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ICollection.Count">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IList.Add(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IList.Clear">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IList.Contains(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IList.IndexOf(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IList.Insert(System.Int32,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IList.Remove(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IList.RemoveAt(System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IList.IsReadOnly">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IList.IsFixedSize">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IList.Item(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Array.Clear(System.Array,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.Clone">
            <summary></summary>
        </member>
        <member name="M:System.Array.Copy(System.Array,System.Array,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.CopyTo(System.Array,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.GetEnumerator">
            <summary></summary>
        </member>
        <member name="M:System.Array.GetValue(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.SetValue(System.Object,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.Compare(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.Compare(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.XOR(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Array.XOR(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Array.System#Collections#ICollection#SyncRoot">
            <summary></summary>
        </member>
        <member name="P:System.Array.System#Collections#ICollection#Count">
            <summary></summary>
        </member>
        <member name="P:System.Array.System#Collections#IList#IsFixedSize">
            <summary></summary>
        </member>
        <member name="P:System.Array.Length">
            <summary></summary>
        </member>
        <member name="P:System.Array.Item(System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Array.System#Collections#IList#IsReadOnly">
            <summary></summary>
        </member>
        <member name="T:System.Collections.ArrayList">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.Add(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.Clear">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.Clone">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.Contains(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.CopyTo(System.Array)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.GetEnumerator">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.IndexOf(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.Insert(System.Int32,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.Remove(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.RemoveAt(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.ToArray">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.ToArray(System.Type)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.ArrayList.TrimToSize">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.System#Collections#IList#IsReadOnly">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.Capacity">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.Count">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.Item(System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.IsReadOnly">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.SyncRoot">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.System#Collections#ICollection#Count">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.System#Collections#ICollection#SyncRoot">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.IsFixedSize">
            <summary></summary>
        </member>
        <member name="P:System.Collections.ArrayList.System#Collections#IList#IsFixedSize">
            <summary></summary>
        </member>
        <member name="T:System.ArrayTypeMismatchException">
            <summary></summary>
        </member>
        <member name="M:System.ArrayTypeMismatchException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.ArrayTypeMismatchException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.ArrayTypeMismatchException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Text.ASCIIEncoding">
            <summary></summary>
        </member>
        <member name="T:System.Text.Encoding">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetString(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetMaxCharCount(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetByteCount(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetByteCount(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetCharCount(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetChars(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetMaxByteCount(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetPreamble">
            <summary></summary>
        </member>
        <member name="M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Text.Encoding.UTF8">
            <summary></summary>
        </member>
        <member name="P:System.Text.Encoding.ASCII">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetByteCount(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.ASCIIEncoding.GetString(System.Byte[])">
            <summary></summary>
        </member>
        <member name="T:System.Reflection.Assembly">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.Assembly.GetName">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.Assembly.GetExecutingAssembly">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.Assembly.GetEntryAssembly">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.Assembly.RegisterExecutingAssemblyDeletion">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.Assembly.GetCallingEntryAssembly">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.Assembly.ToString">
            <summary></summary>
        </member>
        <member name="P:System.Reflection.Assembly.CodeBase">
            <summary></summary>
        </member>
        <member name="T:System.Reflection.AssemblyName">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.AssemblyName.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.AssemblyName.GetPublicKeyToken">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.AssemblyName.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.AssemblyName.GetAssemblyName(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Reflection.AssemblyName.GetPublicKey">
            <summary></summary>
        </member>
        <member name="P:System.Reflection.AssemblyName.CodeBase">
            <summary></summary>
        </member>
        <member name="P:System.Reflection.AssemblyName.Version">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.AsymmetricAlgorithm">
            <summary></summary>
        </member>
        <member name="T:System.IDisposable">
            <summary></summary>
        </member>
        <member name="M:System.IDisposable.Dispose">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.AsymmetricAlgorithm.#ctor">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize">
            <summary></summary>
        </member>
        <member name="T:System.BadImageFormatException">
            <summary></summary>
        </member>
        <member name="M:System.BadImageFormatException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.BadImageFormatException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.BadImageFormatException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Serialization.IFormatter">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatter.Deserialize(System.IO.Stream)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Serialization.IFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize(System.IO.Stream)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Serialize(System.IO.Stream,System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Boolean">
            <summary></summary>
        </member>
        <member name="T:System.ValueType">
            <summary></summary>
        </member>
        <member name="M:System.ValueType.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.ValueType.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.ValueType.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.ValueType.ToString">
            <summary></summary>
        </member>
        <member name="T:System.IComparable">
            <summary></summary>
        </member>
        <member name="M:System.IComparable.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="F:System.Boolean.FalseString">
            <summary></summary>
        </member>
        <member name="F:System.Boolean.TrueString">
            <summary></summary>
        </member>
        <member name="M:System.Boolean.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Boolean.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Boolean.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Boolean.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Boolean.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Byte">
            <summary></summary>
        </member>
        <member name="F:System.Byte.MinValue">
            <summary></summary>
        </member>
        <member name="F:System.Byte.MaxValue">
            <summary></summary>
        </member>
        <member name="M:System.Byte.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Byte.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Byte.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Byte.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Byte.ToString">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.ChannelDataStore">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.IChannelDataStore">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.IChannelDataStore.ChannelUris">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.IChannelDataStore.Item(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.ChannelDataStore.#ctor(System.String[])">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.ChannelDataStore.ChannelUris">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.ChannelDataStore.Item(System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.ChannelServices">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.ChannelServices.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.ChannelServices.RegisterChannel(System.Runtime.Remoting.Channels.IChannel)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.ChannelServices.UnregisterChannel(System.Runtime.Remoting.Channels.IChannel)">
            <summary></summary>
        </member>
        <member name="T:System.Char">
            <summary></summary>
        </member>
        <member name="F:System.Char.MinValue">
            <summary></summary>
        </member>
        <member name="F:System.Char.MaxValue">
            <summary></summary>
        </member>
        <member name="M:System.Char.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Char.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Char.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Char.IsControl(System.Char)">
            <summary></summary>
        </member>
        <member name="M:System.Char.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Char.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Char.IsWhiteSpace(System.Char)">
            <summary></summary>
        </member>
        <member name="T:System.CharEnumerator">
            <summary></summary>
        </member>
        <member name="T:System.Collections.IEnumerator">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IEnumerator.MoveNext">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IEnumerator.Reset">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IEnumerator.Current">
            <summary></summary>
        </member>
        <member name="M:System.CharEnumerator.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.CharEnumerator.Reset">
            <summary></summary>
        </member>
        <member name="M:System.CharEnumerator.Clone">
            <summary></summary>
        </member>
        <member name="M:System.CharEnumerator.MoveNext">
            <summary></summary>
        </member>
        <member name="P:System.CharEnumerator.System#Collections#IEnumerator#Current">
            <summary></summary>
        </member>
        <member name="P:System.CharEnumerator.Current">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.CipherMode">
            <summary></summary>
        </member>
        <member name="T:System.Enum">
            <summary></summary>
        </member>
        <member name="M:System.Enum.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Enum.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Enum.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Enum.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Enum.GetUnderlyingType(System.Type)">
            <summary></summary>
        </member>
        <member name="M:System.Enum.ToString">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.CipherMode.CBC">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.CipherMode.ECB">
            <summary></summary>
        </member>
        <member name="T:System.Convert">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToSByte(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToUInt16(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToUInt32(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToUInt64(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.SByte)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToBoolean(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToByte(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToChar(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToInt16(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToInt32(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToInt64(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.Char)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.Byte)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.Int16)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToString(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.FromBase64String(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.FromBase64CharArray(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ByteArrayToHexString(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Convert.ByteArrayToHexString(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Convert.HexStringToByteArray(System.String)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.CryptoConfig">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.CryptoConfig.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.CryptographicException">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.CryptographicException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.CryptographicException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Diagnostics.Debug">
            <summary></summary>
        </member>
        <member name="M:System.Diagnostics.Debug.Write(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
            <summary></summary>
        </member>
        <member name="T:System.Delegate">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.#ctor(System.Object,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.Clone">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.CombineImpl(System.Delegate)">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.op_Equality(System.Delegate,System.Delegate)">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.op_Inequality(System.Delegate,System.Delegate)">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.Combine(System.Delegate,System.Delegate)">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.Combine(System.Delegate[])">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.GetInvocationList">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.RemoveImpl(System.Delegate)">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.Remove(System.Delegate,System.Delegate)">
            <summary></summary>
        </member>
        <member name="M:System.Delegate.RemoveAll(System.Delegate,System.Delegate)">
            <summary></summary>
        </member>
        <member name="P:System.Delegate.Target">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.DES">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.SymmetricAlgorithm">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SymmetricAlgorithm.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SymmetricAlgorithm.Create(System.String)">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Padding">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Key">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.SymmetricAlgorithm.IV">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.SymmetricAlgorithm.Mode">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.SymmetricAlgorithm.KeySize">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.DES.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.DES.Create">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.DES.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.DES.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.DES.GenerateIV">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.DES.GenerateKey">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.DES.Key">
            <summary></summary>
        </member>
        <member name="T:System.Collections.DictionaryEntry">
            <summary></summary>
        </member>
        <member name="M:System.Collections.DictionaryEntry.#ctor(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="P:System.Collections.DictionaryEntry.Key">
            <summary></summary>
        </member>
        <member name="P:System.Collections.DictionaryEntry.Value">
            <summary></summary>
        </member>
        <member name="T:System.IO.Directory">
            <summary></summary>
        </member>
        <member name="M:System.IO.Directory.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.Directory.GetLogicalDrives">
            <summary></summary>
        </member>
        <member name="M:System.IO.Directory.GetFileSystemEntries(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.Directory.GetFiles(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.Directory.GetDirectories(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.Directory.Delete(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.Directory.Exists(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.Directory.CreateDirectory(System.String)">
            <summary></summary>
        </member>
        <member name="T:System.IO.DirectoryInfo">
            <summary></summary>
        </member>
        <member name="T:System.IO.FileSystemInfo">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileSystemInfo.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileSystemInfo.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileSystemInfo.Delete">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileSystemInfo.Refresh">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemInfo.Attributes">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemInfo.Exists">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemInfo.FullName">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileSystemInfo.Name">
            <summary></summary>
        </member>
        <member name="M:System.IO.DirectoryInfo.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.DirectoryInfo.Create">
            <summary></summary>
        </member>
        <member name="M:System.IO.DirectoryInfo.Delete">
            <summary></summary>
        </member>
        <member name="P:System.IO.DirectoryInfo.Exists">
            <summary></summary>
        </member>
        <member name="P:System.IO.DirectoryInfo.Name">
            <summary></summary>
        </member>
        <member name="P:System.IO.DirectoryInfo.Parent">
            <summary></summary>
        </member>
        <member name="T:System.IO.DirectoryNotFoundException">
            <summary></summary>
        </member>
        <member name="T:System.IO.IOException">
            <summary></summary>
        </member>
        <member name="M:System.IO.IOException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.IOException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.IOException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:System.IO.DirectoryNotFoundException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.DirectoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.DivideByZeroException">
            <summary></summary>
        </member>
        <member name="M:System.DivideByZeroException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.DivideByZeroException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.DivideByZeroException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Environment">
            <summary></summary>
        </member>
        <member name="P:System.Environment.ChipSpeed">
            <summary></summary>
        </member>
        <member name="P:System.Environment.TickCount">
            <summary></summary>
        </member>
        <member name="P:System.Environment.SerialNumber">
            <summary></summary>
        </member>
        <member name="P:System.Environment.Version">
            <summary></summary>
        </member>
        <member name="P:System.Environment.OSVersion">
            <summary></summary>
        </member>
        <member name="P:System.Environment.FreePersistentMemory">
            <summary></summary>
        </member>
        <member name="T:System.EventArgs">
            <summary></summary>
        </member>
        <member name="F:System.EventArgs.Empty">
            <summary></summary>
        </member>
        <member name="M:System.EventArgs.#ctor">
            <summary></summary>
        </member>
        <member name="T:System.MulticastDelegate">
            <summary></summary>
        </member>
        <member name="M:System.MulticastDelegate.#ctor">
            <summary></summary>
        </member>
        <member name="T:System.IO.File">
            <summary></summary>
        </member>
        <member name="M:System.IO.File.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.File.Open(System.String,System.IO.FileMode)">
            <summary></summary>
        </member>
        <member name="M:System.IO.File.Exists(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.File.Delete(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.File.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary></summary>
        </member>
        <member name="M:System.IO.File.OpenRead(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.File.OpenWrite(System.String)">
            <summary></summary>
        </member>
        <member name="T:System.IO.FileAccess">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAccess.Read">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAccess.Write">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAccess.ReadWrite">
            <summary></summary>
        </member>
        <member name="T:System.IO.FileAttributes">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAttributes.System">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAttributes.Locked">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAttributes.Directory">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAttributes.Normal">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAttributes.Assembly">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAttributes.Executable">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileAttributes.FIPS">
            <summary></summary>
        </member>
        <member name="T:System.IO.FileInfo">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileInfo.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileInfo.Delete">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileInfo.Refresh">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileInfo.Exists">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileInfo.Name">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileInfo.Length">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileInfo.Directory">
            <summary></summary>
        </member>
        <member name="T:System.IO.FileMode">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileMode.Append">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileMode.Create">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileMode.CreateNew">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileMode.Open">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileMode.OpenOrCreate">
            <summary></summary>
        </member>
        <member name="F:System.IO.FileMode.Truncate">
            <summary></summary>
        </member>
        <member name="T:System.IO.FileNotFoundException">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileNotFoundException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileNotFoundException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileNotFoundException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.IO.FileStream">
            <summary></summary>
        </member>
        <member name="T:System.IO.Stream">
            <summary></summary>
        </member>
        <member name="M:System.IO.Stream.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.Stream.Close">
            <summary></summary>
        </member>
        <member name="M:System.IO.Stream.Flush">
            <summary></summary>
        </member>
        <member name="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.Stream.ReadByte">
            <summary></summary>
        </member>
        <member name="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary></summary>
        </member>
        <member name="M:System.IO.Stream.SetLength(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.Stream.WriteByte(System.Byte)">
            <summary></summary>
        </member>
        <member name="P:System.IO.Stream.Position">
            <summary></summary>
        </member>
        <member name="P:System.IO.Stream.CanSeek">
            <summary></summary>
        </member>
        <member name="P:System.IO.Stream.CanWrite">
            <summary></summary>
        </member>
        <member name="P:System.IO.Stream.Length">
            <summary></summary>
        </member>
        <member name="P:System.IO.Stream.CanRead">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.#ctor(System.String,System.IO.FileMode)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.WriteByte(System.Byte)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.Close">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.SetLength(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.ReadByte">
            <summary></summary>
        </member>
        <member name="M:System.IO.FileStream.Flush">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileStream.Position">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileStream.CanSeek">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileStream.CanWrite">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileStream.Name">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileStream.Length">
            <summary></summary>
        </member>
        <member name="P:System.IO.FileStream.CanRead">
            <summary></summary>
        </member>
        <member name="T:System.FormatException">
            <summary></summary>
        </member>
        <member name="M:System.FormatException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.FormatException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.FormatException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.HashAlgorithm">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.ICryptoTransform">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.ICryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.ICryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.ICryptoTransform.InputBlockSize">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.ICryptoTransform.CanTransformMultipleBlocks">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.ICryptoTransform.OutputBlockSize">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.HashAlgorithm.UNINITIALIZED">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.HashAlgorithm.INITIALIZED">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.HashAlgorithm.CANNOT_CHANGEKEYS">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.HashAlgorithm.CAN_CHANGEKEYS">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.HashAlgorithm.HashValue">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.HashAlgorithm.State">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.HashAlgorithm.HashSizeValue">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.GetHashValue(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.HashFinal">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.Initialize">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HashAlgorithm.Clear">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithm.HashSize">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithm.InputBlockSize">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithm.Hash">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize">
            <summary></summary>
        </member>
        <member name="T:System.Collections.Hashtable">
            <summary></summary>
        </member>
        <member name="T:System.Collections.IDictionary">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IDictionary.Add(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IDictionary.Clear">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IDictionary.Contains(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IDictionary.GetEnumerator">
            <summary></summary>
        </member>
        <member name="M:System.Collections.IDictionary.Remove(System.Object)">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IDictionary.IsReadOnly">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IDictionary.Values">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IDictionary.Item(System.Object)">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IDictionary.IsFixedSize">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IDictionary.Keys">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.#ctor(System.Int32,System.Single)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.#ctor(System.Collections.IDictionary)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.Add(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.GetHash(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.Clear">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.Clone">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.Contains(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.ContainsKey(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.ContainsValue(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.CopyTo(System.Array,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.GetEnumerator">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.KeyEquals(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Collections.Hashtable.Remove(System.Object)">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.System#Collections#IDictionary#Values">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.System#Collections#IDictionary#Keys">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.Count">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.Values">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.System#Collections#IDictionary#IsFixedSize">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.Item(System.Object)">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.System#Collections#ICollection#Count">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.System#Collections#IDictionary#IsReadOnly">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.IsFixedSize">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.SyncRoot">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.Keys">
            <summary></summary>
        </member>
        <member name="P:System.Collections.Hashtable.IsReadOnly">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.HMACSHA1">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.KeyedHashAlgorithm">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.KeyedHashAlgorithm.Create">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.KeyedHashAlgorithm.Key">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.HMACSHA1.Key">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.IChannel">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IChannel.Parse(System.String,System.String@)">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.IChannel.ChannelName">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.IChannel.ChannelPriority">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.IChannelReceiver">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IChannelReceiver.StartListening(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IChannelReceiver.StopListening(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IChannelReceiver.GetUrlsForUri(System.String)">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.IChannelReceiver.ChannelData">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.IChannelSinkBase">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.IChannelSinkBase.Properties">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Contexts.IContextAttribute">
            <summary></summary>
        </member>
        <member name="T:System.Collections.IDictionaryEnumerator">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IDictionaryEnumerator.Entry">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IDictionaryEnumerator.Key">
            <summary></summary>
        </member>
        <member name="P:System.Collections.IDictionaryEnumerator.Value">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Messaging.IMessage">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Messaging.IMessage.Properties">
            <summary></summary>
        </member>
        <member name="T:System.IndexOutOfRangeException">
            <summary></summary>
        </member>
        <member name="M:System.IndexOutOfRangeException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IndexOutOfRangeException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Int16">
            <summary></summary>
        </member>
        <member name="F:System.Int16.MinValue">
            <summary></summary>
        </member>
        <member name="F:System.Int16.MaxValue">
            <summary></summary>
        </member>
        <member name="M:System.Int16.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Int16.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Int16.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Int16.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Int16.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:System.Int32">
            <summary></summary>
        </member>
        <member name="F:System.Int32.MinValue">
            <summary></summary>
        </member>
        <member name="F:System.Int32.MaxValue">
            <summary></summary>
        </member>
        <member name="M:System.Int32.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Int32.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Int32.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Int32.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Int32.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:System.Int64">
            <summary></summary>
        </member>
        <member name="F:System.Int64.MinValue">
            <summary></summary>
        </member>
        <member name="F:System.Int64.MaxValue">
            <summary></summary>
        </member>
        <member name="M:System.Int64.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Int64.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Int64.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Int64.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Int64.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:System.IntPtr">
            <summary></summary>
        </member>
        <member name="T:System.InvalidCastException">
            <summary></summary>
        </member>
        <member name="M:System.InvalidCastException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.InvalidCastException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.InvalidCastException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.InvalidOperationException">
            <summary></summary>
        </member>
        <member name="M:System.InvalidOperationException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.InvalidOperationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.InvalidOperationException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.IServerChannelSink">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IServerChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IServerChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.IServerChannelSink.NextChannelSink">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IServerChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IServerChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.IServerChannelSinkProvider.Next">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.IServerChannelSinkStack">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack.GetResponseStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IServerChannelSinkStack.Pop(System.Runtime.Remoting.Channels.IServerChannelSink)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.IServerChannelSinkStack.Push(System.Runtime.Remoting.Channels.IServerChannelSink,System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.IServerFormatterSinkProvider">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.ITransportHeaders">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.ITransportHeaders.GetEnumerator">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.ITransportHeaders.Item(System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.KeySizes">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.KeySizes.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.KeySizes.MaxSize">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.KeySizes.SkipSize">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.KeySizes.MinSize">
            <summary></summary>
        </member>
        <member name="T:System.MarshalByRefObject">
            <summary></summary>
        </member>
        <member name="M:System.MarshalByRefObject.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.MarshalByRefObject.Lock">
            <summary></summary>
        </member>
        <member name="T:System.Math">
            <summary></summary>
        </member>
        <member name="M:System.Math.Min(System.Byte,System.Byte)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Max(System.Byte,System.Byte)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Min(System.SByte,System.SByte)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Max(System.SByte,System.SByte)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Min(System.Int16,System.Int16)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Max(System.Int16,System.Int16)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Min(System.UInt16,System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Max(System.UInt16,System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Min(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Max(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Min(System.UInt32,System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Max(System.UInt32,System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Min(System.Int64,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Max(System.Int64,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Min(System.UInt64,System.UInt64)">
            <summary></summary>
        </member>
        <member name="M:System.Math.Max(System.UInt64,System.UInt64)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.MD5">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.MD5.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.MD5.Create">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.MD5.Initialize">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.MD5.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.MD5.HashFinal">
            <summary></summary>
        </member>
        <member name="T:System.MemberAccessException">
            <summary></summary>
        </member>
        <member name="M:System.MemberAccessException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.MemberAccessException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.MemberAccessException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.IO.MemoryStream">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.Close">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.Flush">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.SetLength(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.WriteByte(System.Byte)">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.ReadByte">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.WriteTo(System.IO.Stream)">
            <summary></summary>
        </member>
        <member name="M:System.IO.MemoryStream.ToArray">
            <summary></summary>
        </member>
        <member name="P:System.IO.MemoryStream.Position">
            <summary></summary>
        </member>
        <member name="P:System.IO.MemoryStream.CanSeek">
            <summary></summary>
        </member>
        <member name="P:System.IO.MemoryStream.CanWrite">
            <summary></summary>
        </member>
        <member name="P:System.IO.MemoryStream.Length">
            <summary></summary>
        </member>
        <member name="P:System.IO.MemoryStream.Capacity">
            <summary></summary>
        </member>
        <member name="P:System.IO.MemoryStream.CanRead">
            <summary></summary>
        </member>
        <member name="T:System.MissingFieldException">
            <summary></summary>
        </member>
        <member name="T:System.MissingMemberException">
            <summary></summary>
        </member>
        <member name="M:System.MissingMemberException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.MissingMemberException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.MissingMemberException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="M:System.MissingFieldException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.MissingFieldException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.MissingFieldException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.MissingMethodException">
            <summary></summary>
        </member>
        <member name="M:System.MissingMethodException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.MissingMethodException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.MissingMethodException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.NotImplementedException">
            <summary></summary>
        </member>
        <member name="M:System.NotImplementedException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.NotImplementedException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.NotImplementedException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.NotSupportedException">
            <summary></summary>
        </member>
        <member name="M:System.NotSupportedException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.NotSupportedException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.NotSupportedException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.NullReferenceException">
            <summary></summary>
        </member>
        <member name="M:System.NullReferenceException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.NullReferenceException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.NullReferenceException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.ObjectDisposedException">
            <summary></summary>
        </member>
        <member name="M:System.ObjectDisposedException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.ObjectDisposedException.#ctor(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="P:System.ObjectDisposedException.ObjectName">
            <summary></summary>
        </member>
        <member name="P:System.ObjectDisposedException.Message">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.ObjRef">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.ObjRef.#ctor">
            <summary></summary>
        </member>
        <member name="T:System.OperatingSystem">
            <summary></summary>
        </member>
        <member name="M:System.OperatingSystem.#ctor">
            <summary></summary>
        </member>
        <member name="P:System.OperatingSystem.Version">
            <summary></summary>
        </member>
        <member name="T:System.OutOfMemoryException">
            <summary></summary>
        </member>
        <member name="M:System.OutOfMemoryException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.OutOfMemoryException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.OutOfMemoryException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.OverflowException">
            <summary></summary>
        </member>
        <member name="M:System.OverflowException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.OverflowException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.OverflowException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.PaddingMode">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.PaddingMode.None">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.PaddingMode.PKCS7">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.PaddingMode.Zeros">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.PaddingMode.ISO9797M2">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.RandomNumberGenerator">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.RemotingConfiguration">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingConfiguration.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.RemotingException">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.RemotingServices">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingServices.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingServices.Unregister(System.MarshalByRefObject,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingServices.Marshal(System.MarshalByRefObject,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.RemotingServices.Marshal(System.MarshalByRefObject,System.String,System.Type)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.Rijndael">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.Rijndael.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.Rijndael.Create">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.Rijndael.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.Rijndael.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.Rijndael.GenerateIV">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.Rijndael.GenerateKey">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.RNGCryptoServiceProvider">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetBytes(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RNGCryptoServiceProvider.GetNonZeroBytes(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.RSA">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSA.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.RSACryptoServiceProvider">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Encrypt(System.Byte[],System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.Decrypt(System.Byte[],System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Int32,System.Int32,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyData(System.Byte[],System.Object,System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ImportParameters(System.Security.Cryptography.RSAParameters)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.ExportParameters(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.EncryptValue(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.DecryptValue(System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignHash(System.Byte[],System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.VerifyHash(System.Byte[],System.String,System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.RSACryptoServiceProvider.SignData(System.Byte[],System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.RSAParameters">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.RSAParameters.D">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.RSAParameters.P">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.RSAParameters.Q">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.RSAParameters.DP">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.RSAParameters.DQ">
            <summary></summary>
        </member>
        <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
            <summary></summary>
        </member>
        <member name="T:System.RuntimeFieldHandle">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array,System.RuntimeFieldHandle)">
            <summary></summary>
        </member>
        <member name="T:System.RuntimeTypeHandle">
            <summary></summary>
        </member>
        <member name="T:System.SByte">
            <summary></summary>
        </member>
        <member name="F:System.SByte.MinValue">
            <summary></summary>
        </member>
        <member name="F:System.SByte.MaxValue">
            <summary></summary>
        </member>
        <member name="M:System.SByte.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.SByte.ToString">
            <summary></summary>
        </member>
        <member name="M:System.SByte.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.SByte.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.SByte.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:System.Security.SecurityException">
            <summary></summary>
        </member>
        <member name="M:System.Security.SecurityException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.SecurityException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Security.SecurityException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.IO.SeekOrigin">
            <summary></summary>
        </member>
        <member name="F:System.IO.SeekOrigin.Begin">
            <summary></summary>
        </member>
        <member name="F:System.IO.SeekOrigin.Current">
            <summary></summary>
        </member>
        <member name="F:System.IO.SeekOrigin.End">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Serialization.SerializationException">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Serialization.SerializationException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.ServerProcessing">
            <summary></summary>
        </member>
        <member name="F:System.Runtime.Remoting.Channels.ServerProcessing.Complete">
            <summary></summary>
        </member>
        <member name="F:System.Runtime.Remoting.Channels.ServerProcessing.OneWay">
            <summary></summary>
        </member>
        <member name="F:System.Runtime.Remoting.Channels.ServerProcessing.Async">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.SHA1">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA1.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA1.Create">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA1.Initialize">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA1.HashFinal">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.SHA256">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA256.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA256.Create">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA256.Initialize">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.SHA256.HashFinal">
            <summary></summary>
        </member>
        <member name="T:System.StackOverflowException">
            <summary></summary>
        </member>
        <member name="M:System.StackOverflowException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.StackOverflowException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.StackOverflowException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.IO.StreamReader">
            <summary></summary>
        </member>
        <member name="T:System.IO.TextReader">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextReader.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextReader.Close">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextReader.Peek">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextReader.Read">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextReader.ReadToEnd">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextReader.ReadLine">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.Peek">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.Read">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.ReadLine">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.ReadToEnd">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamReader.Close">
            <summary></summary>
        </member>
        <member name="P:System.IO.StreamReader.CurrentEncoding">
            <summary></summary>
        </member>
        <member name="P:System.IO.StreamReader.BaseStream">
            <summary></summary>
        </member>
        <member name="T:System.IO.StreamWriter">
            <summary></summary>
        </member>
        <member name="T:System.IO.TextWriter">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextWriter.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextWriter.Write(System.Char)">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextWriter.Close">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextWriter.Write(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextWriter.Write(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextWriter.WriteLine(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.TextWriter.Flush">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.Write(System.Char)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.Write(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.Close">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.Write(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.WriteLine(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StreamWriter.Flush">
            <summary></summary>
        </member>
        <member name="P:System.IO.StreamWriter.BaseStream">
            <summary></summary>
        </member>
        <member name="P:System.IO.StreamWriter.Encoding">
            <summary></summary>
        </member>
        <member name="T:System.String">
            <summary></summary>
        </member>
        <member name="F:System.String.Empty">
            <summary></summary>
        </member>
        <member name="M:System.String.#ctor(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.String.#ctor(System.Char,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.#ctor(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.String.Trim">
            <summary></summary>
        </member>
        <member name="M:System.String.Compare(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.op_Inequality(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.Concat(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.ToCharArray">
            <summary></summary>
        </member>
        <member name="M:System.String.Clone">
            <summary></summary>
        </member>
        <member name="M:System.String.Compare(System.String,System.String,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.String.ToLower">
            <summary></summary>
        </member>
        <member name="M:System.String.op_Equality(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.String.Concat(System.Object,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.String.Concat(System.Object[])">
            <summary></summary>
        </member>
        <member name="M:System.String.Concat(System.String,System.String,System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.Concat(System.String[])">
            <summary></summary>
        </member>
        <member name="M:System.String.Copy(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.EndsWith(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.String.Equals(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.Equals(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.GetEnumerator">
            <summary></summary>
        </member>
        <member name="M:System.String.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.String.IndexOf(System.Char)">
            <summary></summary>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.IndexOfAny(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.String.IndexOfAny(System.Char[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.IsInterned(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.Intern(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char)">
            <summary></summary>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.LastIndexOfAny(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.StartsWith(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.Substring(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.Substring(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.ToCharArray(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.ToString">
            <summary></summary>
        </member>
        <member name="M:System.String.TrimStart(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.String.TrimEnd(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.String.Trim(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.String.ToUpper">
            <summary></summary>
        </member>
        <member name="M:System.String.Insert(System.Int32,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.String.Join(System.String,System.String[])">
            <summary></summary>
        </member>
        <member name="M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.String.Replace(System.Char,System.Char)">
            <summary></summary>
        </member>
        <member name="P:System.String.Length">
            <summary></summary>
        </member>
        <member name="P:System.String.Chars(System.Int32)">
            <summary></summary>
        </member>
        <member name="T:System.Text.StringBuilder">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.SByte)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Char)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Char,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Byte)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Int16)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Append(System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.EnsureCapacity(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Replace(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.Char)">
            <summary></summary>
        </member>
        <member name="M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)">
            <summary></summary>
        </member>
        <member name="P:System.Text.StringBuilder.Capacity">
            <summary></summary>
        </member>
        <member name="P:System.Text.StringBuilder.Length">
            <summary></summary>
        </member>
        <member name="P:System.Text.StringBuilder.Chars(System.Int32)">
            <summary></summary>
        </member>
        <member name="T:System.IO.StringReader">
            <summary></summary>
        </member>
        <member name="M:System.IO.StringReader.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StringReader.Close">
            <summary></summary>
        </member>
        <member name="M:System.IO.StringReader.Peek">
            <summary></summary>
        </member>
        <member name="M:System.IO.StringReader.Read">
            <summary></summary>
        </member>
        <member name="M:System.IO.StringReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.IO.StringReader.ReadLine">
            <summary></summary>
        </member>
        <member name="M:System.IO.StringReader.ReadToEnd">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.Channels.TransportHeaders">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.TransportHeaders.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.Channels.TransportHeaders.GetEnumerator">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.Channels.TransportHeaders.Item(System.Object)">
            <summary></summary>
        </member>
        <member name="T:System.Security.Cryptography.TripleDES">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.TripleDES.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.TripleDES.Create">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.TripleDES.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.TripleDES.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.TripleDES.GenerateIV">
            <summary></summary>
        </member>
        <member name="M:System.Security.Cryptography.TripleDES.GenerateKey">
            <summary></summary>
        </member>
        <member name="P:System.Security.Cryptography.TripleDES.Key">
            <summary></summary>
        </member>
        <member name="T:System.Type">
            <summary></summary>
        </member>
        <member name="M:System.Type.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Type.ToString">
            <summary></summary>
        </member>
        <member name="M:System.Type.GetElementType">
            <summary></summary>
        </member>
        <member name="M:System.Type.IsSubclassOf(System.Type)">
            <summary></summary>
        </member>
        <member name="M:System.Type.IsInstanceOfType(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Type.GetHashCode">
            <summary></summary>
        </member>
        <member name="M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)">
            <summary></summary>
        </member>
        <member name="P:System.Type.FullName">
            <summary></summary>
        </member>
        <member name="P:System.Type.BaseType">
            <summary></summary>
        </member>
        <member name="P:System.Type.IsClass">
            <summary></summary>
        </member>
        <member name="P:System.Type.IsInterface">
            <summary></summary>
        </member>
        <member name="P:System.Type.IsEnum">
            <summary></summary>
        </member>
        <member name="P:System.Type.IsValueType">
            <summary></summary>
        </member>
        <member name="P:System.Type.IsArray">
            <summary></summary>
        </member>
        <member name="P:System.Type.Assembly">
            <summary></summary>
        </member>
        <member name="T:System.TypedReference">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.TypeEntry">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.TypeEntry.#ctor">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.TypeEntry.TypeName">
            <summary></summary>
        </member>
        <member name="T:System.TypeLoadException">
            <summary></summary>
        </member>
        <member name="M:System.TypeLoadException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.TypeLoadException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.TypeLoadException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.UInt16">
            <summary></summary>
        </member>
        <member name="F:System.UInt16.MinValue">
            <summary></summary>
        </member>
        <member name="F:System.UInt16.MaxValue">
            <summary></summary>
        </member>
        <member name="M:System.UInt16.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.UInt16.ToString">
            <summary></summary>
        </member>
        <member name="M:System.UInt16.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.UInt16.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.UInt16.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:System.UInt32">
            <summary></summary>
        </member>
        <member name="F:System.UInt32.MinValue">
            <summary></summary>
        </member>
        <member name="F:System.UInt32.MaxValue">
            <summary></summary>
        </member>
        <member name="M:System.UInt32.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.UInt32.ToString">
            <summary></summary>
        </member>
        <member name="M:System.UInt32.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.UInt32.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.UInt32.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:System.UInt64">
            <summary></summary>
        </member>
        <member name="F:System.UInt64.MinValue">
            <summary></summary>
        </member>
        <member name="F:System.UInt64.MaxValue">
            <summary></summary>
        </member>
        <member name="M:System.UInt64.Parse(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.UInt64.ToString">
            <summary></summary>
        </member>
        <member name="M:System.UInt64.CompareTo(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.UInt64.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.UInt64.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:System.UnauthorizedAccessException">
            <summary></summary>
        </member>
        <member name="M:System.UnauthorizedAccessException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.UnauthorizedAccessException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.UnauthorizedAccessException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Text.UTF8Encoding">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.#ctor(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetByteCount(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetBytes(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetMaxByteCount(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetMaxCharCount(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetPreamble">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Text.UTF8Encoding.GetHashCode">
            <summary></summary>
        </member>
        <member name="T:System.Security.VerificationException">
            <summary></summary>
        </member>
        <member name="M:System.Security.VerificationException.#ctor">
            <summary></summary>
        </member>
        <member name="M:System.Security.VerificationException.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:System.Security.VerificationException.#ctor(System.String,System.Exception)">
            <summary></summary>
        </member>
        <member name="T:System.Version">
            <summary></summary>
        </member>
        <member name="M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:System.Version.Equals(System.Object)">
            <summary></summary>
        </member>
        <member name="M:System.Version.op_Equality(System.Version,System.Version)">
            <summary></summary>
        </member>
        <member name="M:System.Version.op_Inequality(System.Version,System.Version)">
            <summary></summary>
        </member>
        <member name="M:System.Version.ToString">
            <summary></summary>
        </member>
        <member name="P:System.Version.Major">
            <summary></summary>
        </member>
        <member name="P:System.Version.Revision">
            <summary></summary>
        </member>
        <member name="P:System.Version.Build">
            <summary></summary>
        </member>
        <member name="P:System.Version.Minor">
            <summary></summary>
        </member>
        <member name="T:System.Void">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.WellKnownObjectMode">
            <summary></summary>
        </member>
        <member name="F:System.Runtime.Remoting.WellKnownObjectMode.SingleCall">
            <summary></summary>
        </member>
        <member name="F:System.Runtime.Remoting.WellKnownObjectMode.Singleton">
            <summary></summary>
        </member>
        <member name="T:System.Runtime.Remoting.WellKnownServiceTypeEntry">
            <summary></summary>
        </member>
        <member name="M:System.Runtime.Remoting.WellKnownServiceTypeEntry.#ctor(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.WellKnownServiceTypeEntry.ObjectUri">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.WellKnownServiceTypeEntry.ObjectType">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.WellKnownServiceTypeEntry.ContextAttributes">
            <summary></summary>
        </member>
        <member name="P:System.Runtime.Remoting.WellKnownServiceTypeEntry.Mode">
            <summary></summary>
        </member>
        <member name="T:System.Diagnostics.ConditionalAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Attribute">
            <summary>
            Serves as the base class for all custom attributes. An attribute is
            an annotation that may be placed on an element of source code and 
            used to store application-specific information at compile-time. This
            information is stored in the metadata and can be accessed either
            during application execution (using reflection) or when another
            tool reads the metadata. Attributes might change the behaviour of
            the application during execution, provide transaction information
            about an object, or convey organizational information to a designer.
            </summary>
        </member>
        <member name="M:System.Attribute.#ctor">
            <summary>
            Constructs a new instance of an attribute. Protected to prevent 
            constuction of the base class.
            </summary>
        </member>
        <member name="M:System.Attribute.Equals(System.Object)">
            <summary>
            Determines whether the current instance and the given 
            System.Object represent the same type and value.
            </summary>
            
            <param name="obj">
            The System.Object to compare to the current instance.
            </param>
            
            <returns>
            A System.Boolean where true indicates 'obj' represents the
            same type and value as the current instance. If 'obj' is a
            null reference or is not an instance of System.Attribute, 
            returns false.
            </returns>
        </member>
        <member name="M:System.Attribute.GetHashCode">
            <summary>
            Generates a hash code for the current instanc.
            </summary>
            
            <returns>
            A System.Int32 containing the hash code for the current instance.
            </returns>
        </member>
        <member name="M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)">
            <summary>
            Indicates to the compiler that the tagged method is only available if the preprocessor
            condition is met.  If it is then calls to the method will be generated, otherwise calls to
            the method will be ignored (essentially removed from the code).
            </summary>
            
            <param name="condition">
            Preprocessor condition which must be defined for the tagged method to be available.
            </param>
        </member>
        <member name="T:System.Reflection.AssemblyCompanyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyCompanyAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyConfigurationAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyConfigurationAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyCopyrightAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyCopyrightAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyCultureAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyCultureAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyDelaySignAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyDelaySignAttribute.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyDescriptionAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyDescriptionAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyFileVersionAttribute">
            <summary>
            Instructs a compiler to use a specific version number for the Win32 file version resource. 
            The Win32 file version is not required to be the same as the assembly's version number. 
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyFileVersionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AssemblyFileVersionAttribute class, specifying the file version. 
            </summary>
            <param name="version">The file version.</param>
        </member>
        <member name="T:System.Reflection.AssemblyKeyFileAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyKeyFileAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyKeyNameAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyKeyNameAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyProductAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyProductAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyTitleAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyTitleAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyTrademarkAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyTrademarkAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.AssemblyVersionAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Reflection.AssemblyVersionAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="val"></param>
        </member>
        <member name="T:System.Reflection.DefaultMemberAttribute">
            <summary>
            Defines the member of a type that is the default member used
            bye InvokeMember.
            </summary>
        </member>
        <member name="M:System.Reflection.DefaultMemberAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DefaultMemberAttribute
            class.
            </summary>
            
            <param name="memberName">
            A String containing the name of the member to invoke. If the
            string is empty then the default member is invoked.
            </param>
        </member>
        <member name="T:System.Security.FIPSAttribute">
            <summary>
            Enforce FIPS compliancy at source level.
            </summary>
            
            <remarks>
            An assembly annoted with this attribute will mandate FIPS compliancy.
            </remarks>
        </member>
        <member name="M:System.Security.FIPSAttribute.#ctor">
            <summary>
            Intializes an instance of the FIPSAttribute class.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DiscardableAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.DiscardableAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <summary>
            Attribute used for Extension methods
            </summary>
            
            <remarks>
            Feature supported by .NET 3.5 compiler.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.ExtensionAttribute.#ctor">
            <summary>
            Initializes a new instance of the ExtensionAttribute with default properties.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IndexerNameAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)">
            <summary>
            Indicates the name by which an indexer is known in programming languages
            that do not support indexers directly.
            </summary>
            
            <param name="name">
            The new name for the indexer.
            </param>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsVolatile">
            <summary>
            Marks a field as volatile.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.IsVolatile.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.MethodImplAttribute">
            <summary>
            Specifies the details on how this method is implemented.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplAttribute.m_Options">
            <summary>
            The System.Runtime.CompilerServices.MethodImplOptions
            value describing the method attributed by the current
            instance.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor">
            <summary>
            Initializes a new instance of the MethodImplAttribute
            class.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.MethodImplAttribute.#ctor(System.Runtime.CompilerServices.MethodImplOptions)">
            <summary>
            Constructs and initializes a new instance of MethodImpleAttribute
            using the given System.Runtime.CompilerServices.MethodImplOptions.
            </summary>
            
            <param name="options">
            A System.Runtime.CompilerServices.MethodImplOptions value that
            specifies a property of the method attributes by the current
            instance.
            </param>
        </member>
        <member name="T:System.Runtime.CompilerServices.MethodImplOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Unmanaged">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.NoInlining">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.ForwardRef">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.Synchronized">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.MethodImplOptions.InternalCall">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.ComVisibleAttribute">
            <summary>
            Controls accessibility of an individual managed type or member, or of all types within an assembly, to COM.
            </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ComVisibleAttribute class.
            </summary>
            <param name="visibility">true to indicate that the type is visible to COM; otherwise, false. The default is true.</param>
        </member>
        <member name="T:System.Runtime.InteropServices.GuidAttribute">
            <summary>
            Supplies an explicit System.Guid when an automatic GUID is undesirable. 
            </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the GuidAttribute class with the specified GUID. 
            </summary>
            <param name="guid">The Guid to be assigned.</param>
        </member>
        <member name="T:System.Runtime.InteropServices.LayoutKind">
            <summary>
            Controls the layout of an object when exported to unmanaged code.
            </summary>
            
            <remarks>
            This type is provided for compilation purposes and should not be used by applications.
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.LayoutKind.Sequential">
            <summary>
            The members of the object are laid out sequentially, in the order in which they appear when exported to unmanaged memory. 
            The members are laid out according to the packing specified in StructLayoutAttribute.Pack, and can be noncontiguous. 
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.LayoutKind.Explicit">
            <summary>
            The precise position of each member of an object in unmanaged memory is explicitly controlled. 
            Each member must use the FieldOffsetAttribute to indicate the position of that field within the type. 
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.LayoutKind.Auto">
            <summary>
            The runtime automatically chooses an appropriate layout for the members of an object in unmanaged memory.
            Objects defined with this enumeration member cannot be exposed outside of managed code. Attempting to do so generates an exception. 
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.OutAttribute">
            <summary>
            Class used for the marshalling of data from the callee back
            to the caller.
            </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.OutAttribute.#ctor">
            <summary>
            Intializes an instance of the OutAttribute class.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.StructLayoutAttribute">
            <summary>
            This class allows the user to control the physical layout
            of the data fields of a class or structure.
            </summary>
        </member>
        <member name="F:System.Runtime.InteropServices.StructLayoutAttribute.Size">
            <summary>
            Indicates the absolute size of the structure or class.
            </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)">
            <summary>
            Intiliazes a new instance of the StructLayoutClass with
            the given LayoutKind value.
            </summary>
            
            <param name="val">
            The LayoutKind value that specifes how the class or 
            structure should be arranged.
            </param>
        </member>
        <member name="T:System.AttributeTargets">
            <summary>
            Enumerates the application elements to which it is valid to
            attach an attribute.
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Assembly">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Module">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Class">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Struct">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Enum">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Constructor">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Method">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Property">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Field">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Event">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Interface">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Parameter">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.Delegate">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.ReturnValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.AttributeTargets.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.AttributeUsageAttribute">
            <summary>
            An attribute the specifies the behaviour of a custom attribute
            when the attribute is defined. The System.AttributeUsageAttribute
            class contains tree properties the govern custom attribute behaviour:
            the kinds of application elements the attribute may be associated 
            with; whether the attribute may or may not be inherited by derived
            elements; and whether multiple instance of the attribute may or may
            not be allowed on the same target element.
            </summary>
        </member>
        <member name="F:System.AttributeUsageAttribute.m_ValidOn">
            <summary>
            The set of application elements to which the attribute
            will be applied.
            </summary>
        </member>
        <member name="F:System.AttributeUsageAttribute.m_AllowMultiple">
            <summary>
            A flag indicating whether to allow multiple instances of itself.
            Default is false;
            </summary>
        </member>
        <member name="F:System.AttributeUsageAttribute.m_AllowInherited">
            <summary>
            A flag indicating whther to allow itself to be inherited by
            derived class to which the attibute is applied.
            Default is true;
            </summary>
        </member>
        <member name="M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)">
            <summary>
            Constructs and initializes a new instance of the 
            System.AttributeUsageAttribute class.
            </summary>
            
            <param name="validOn">
            The set of application elements to which the attribute will be
            applied. When indicating multiple application elements, 'validOn'
            is a bitwise OR combination of System.AttributeTargets enum
            values.
            </param>
        </member>
        <member name="P:System.AttributeUsageAttribute.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether more than one instance of
            a given attribute is permitted to be applied to any given program
            element.
            </summary>
            
            <value>
            A System.Boolean where true indicates more than one instance of
            the attribute is permitted to be applied; otherise, false. The
            default is false.
            </value>
        </member>
        <member name="P:System.AttributeUsageAttribute.Inherited">
            <summary>
            Gets or sets a System.Boolean value indicating whether the 
            attibute can be inherited by a subclasses of the class to
            which the attribute is applied.
            </summary>
            
            <value>
            A System.Boolean where true indicates the attribute is inherited
            by sublcasses; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:System.AttributeUsageAttribute.ValidOn">
            <summary>
            Gets the set of values sent to the System.AttributeUsageAttribute
            constructor that indicate to which target the custom attribute may
            be applied. This property is READ-ONLY.
            </summary>
            
            <value>
            One or more of the System.AttributeTargets values sent to the 
            constructor, combined by a bitwise OR operation.
            </value>
        </member>
        <member name="T:System.CLSCompliantAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.CLSCompliantAttribute.m_IsCompliant">
            <summary>
            Flag indicating whether the program element is CLS-compliant.
            </summary>
        </member>
        <member name="M:System.CLSCompliantAttribute.#ctor(System.Boolean)">
            <summary>
            Intializes an instance of the CLSCompliantAttribute
            class with a Boolean value indicating whether the 
            indicated program element is CLS-compliant.
            </summary>
            
            <param name="isCompliant">
            true if CLS-compliant; otherwise false.
            </param>
        </member>
        <member name="T:System.Decimal">
            <summary>
            Represents a decimal number. 
            </summary>
            
            <remarks>
            The Decimal value type represents decimal numbers ranging from positive 79,228,162,514,264,337,593,543,950,335 to negative 
            79,228,162,514,264,337,593,543,950,335. The Decimal value type is appropriate for financial calculations requiring large numbers 
            of significant integral and fractional digits and no round-off errors. A decimal number is a floating-point value that consists 
            of a sign, a numeric value where each digit in the value ranges from 0 to 9, and a scaling factor that indicates the position 
            of a floating decimal point that separates the integral and fractional parts of the numeric value. 
            </remarks>
        </member>
        <member name="T:System.Double">
            <summary>
            The Double value type represents a double precision 64-bit
            number with values ranging from negative 1.79769313486232e308
            to positive 1.79769313486232e308 as well as positive and negative zero,
            PositiveInfinity, NegativeInfinity and NaN.
            </summary>
        </member>
        <member name="F:System.Double.Epsilon">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Double.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Double.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Double.NaN">
            <summary>
            TODO: Set suitable values for these constants.
            </summary>
        </member>
        <member name="F:System.Double.NegativeInfinity">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Double.PositiveInfinity">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.NonSerializedAttribute">
             <summary>
             Indicates that a field of a serializable class should not be serialized.
             </summary>
             
             <remarks>
             The target objects for the NonSerializedAttribute are public and private fields of a serializable class. 
             In contrast to standard .NET, by default, all classes are serializable. One may use the [NonSerialized] attribute to
             explicitely exclude a field from the default serialization.
             
             This attribute is typically used to mark fields that must have a card session transient behavior (PIN validation flag for ex).
             <p>
             Important : using [NonSerialized] attribute on a field does not mean that field updates will not participate in possible on-going transaction.
             Refer to [OutOfTransaction] attribute in SmartCard.Services namespace.<see cref="!:SmartCard.Services.OutOfTransaction"/>.
             </p>
             </remarks>
            
            <example>    
            <code>
             public class MySecureKeyStore {
             
                 [NonSerialized]
                 bool isValidated;
                     
                 byte[] key;
                 
                 public MySecureKeyStore()
                 {
                 }
             }    
            </code>    
                
             When serialization into the SmartCard persistent memory of the above class will occur, the field isValidated will be excluded from the process.
             As a consequence, after a SmartCard reset the value of field isValidated of class MySecureKeyStore will be the standard CLR default value (false in this example).
            </example>
             
            
        </member>
        <member name="M:System.NonSerializedAttribute.#ctor">
            <summary>
            Initializes a new instance of the NonSerializedAttribute class.
            </summary>
        </member>
        <member name="T:System.ParamArrayAttribute">
            <summary>
            Class used to indicate that a method will allow a variable
            number of arguments in its invocation.
            </summary>
        </member>
        <member name="M:System.ParamArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the ParamArrayAttribute with
            default properties.
            </summary>
        </member>
        <member name="T:System.Single">
            <summary>
            The Single value type represents a single-precision 32-bit
            number with values ranging from negative 3.402823e38 to
            positive 3.402823e38 as well as positive and negative zero,
            PositiveInfinity, NegativeInfinity and NaN.
            </summary>
        </member>
        <member name="F:System.Single.Epsilon">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Single.MinValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Single.MaxValue">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Single.NaN">
            <summary>
            TODO: Set suitable values for these constants.
            </summary>
        </member>
        <member name="F:System.Single.NegativeInfinity">
            <summary>
            
            </summary>
        </member>
        <member name="F:System.Single.PositiveInfinity">
            <summary>
            
            </summary>
        </member>
        <member name="T:System.UIntPtr">
            <summary>
            An implementation specific type that is used to represent a pointer or handle.    
            </summary>
            <remarks>
            This type is provided for compilation purposes and must not be used by applications.
            </remarks>    
        </member>
    </members>
</doc>
<!--+- OmniWorks Replacement History - scnet2`library`PublicRelease`FrameworkLibraries:mscorlib.xml;9 -->
<!--       9*[589178] 10-DEC-2007 18:20:18 (GMT) ksachdeva -->
<!--         "Updated for the mask release 2.1.213.9175" -->
<!--       8*[588923] 20-NOV-2007 00:46:11 (GMT) ksachdeva -->
<!--         "Updated for the mask release 2.1.208.8923" -->
<!--       7*[588696] 03-OCT-2007 19:50:31 (GMT) sprevost -->
<!--         "Regenerate: add System.Security.FIPSAttribute + System.Runtime.CompilerService.ExtensionAttribute." -->
<!--       6*[578634] 31-OCT-2006 19:11:03 (GMT) ksachdeva -->
<!--         "Updated for the mask release 2.0.57.8631" -->
<!--       5*[576729] 21-AUG-2006 21:54:43 (GMT) sprevost -->
<!--         "Updated for the mask release 2.0.27.6730." -->
<!--       4*[576683] 21-AUG-2006 01:49:31 (GMT) sprevost -->
<!--         "Updated for the mask release 2.0.22.6687" -->
<!--       3*[576554] 15-AUG-2006 21:09:20 (GMT) sprevost -->
<!--         "Updated for the testmask release 2.1.6551.9." -->
<!--       2*[576525] 15-AUG-2006 00:42:02 (GMT) sprevost -->
<!--         "Regenerated." -->
<!--       1*[576429] 13-AUG-2006 18:04:29 (GMT) ksachdeva -->
<!--         "Initial:" -->
<!--+- OmniWorks Replacement History - scnet2`library`PublicRelease`FrameworkLibraries:mscorlib.xml;9 -->
